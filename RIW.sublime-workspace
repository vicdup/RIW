{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"displ",
				"displayMenu"
			],
			[
				"dis",
				"displayMenu"
			],
			[
				"boo",
				"booleanSearch"
			],
			[
				"index",
				"indexInverse"
			],
			[
				"res",
				"resultsScored"
			],
			[
				"lgo",
				"log10"
			],
			[
				"article",
				"article"
			],
			[
				"artic",
				"article"
			],
			[
				"rappel",
				"rappel"
			],
			[
				"resu",
				"results"
			],
			[
				"par",
				"parsedQrels"
			],
			[
				"p",
				"parsedQrels"
			],
			[
				"generateI",
				"generateIIndex"
			],
			[
				"gen",
				"generateDico"
			],
			[
				"artc",
				"articleWeight	statement"
			],
			[
				"dic",
				"dicoWeights	statement"
			],
			[
				"generatei",
				"generateIndex	function"
			],
			[
				"bool",
				"booleanSearch	function"
			],
			[
				"log",
				"log10	function"
			],
			[
				"lo",
				"log10	function"
			],
			[
				"sort",
				"sorted_results	statement"
			],
			[
				"dump",
				"dumps	function"
			],
			[
				"indexe",
				"indexedQueryObject	statement"
			],
			[
				"text",
				"textWeight	statement"
			],
			[
				"indexQ",
				"indexedQuery"
			],
			[
				"try",
				"try	Try/Except"
			],
			[
				"loa",
				"loadIIndexFromFile"
			],
			[
				"cal",
				"calculCosinus"
			],
			[
				"articl",
				"articleWeight"
			],
			[
				"rec",
				"rec_dd"
			],
			[
				"generate",
				"generateIndex"
			],
			[
				"vec",
				"vectorB"
			],
			[
				"so",
				"sommeCarreB"
			],
			[
				"som",
				"sommeCarreA"
			],
			[
				"somme",
				"sommeCarreB"
			],
			[
				"mot",
				"motA"
			],
			[
				"mo",
				"motA"
			],
			[
				"vector",
				"vectorA"
			],
			[
				"de",
				"delimiteur"
			],
			[
				"se",
				"separateur"
			],
			[
				"sep",
				"separateurs"
			],
			[
				"spl",
				"splitCACM"
			],
			[
				"stop",
				"stopListe"
			]
		]
	},
	"buffers":
	[
		{
			"file": "/D/Downloads/inverseIndexTFIDFwithoutNorm.py",
			"settings":
			{
				"buffer_size": 3343,
				"line_ending": "Windows"
			}
		},
		{
			"file": "execute.py",
			"settings":
			{
				"buffer_size": 2124,
				"line_ending": "Windows"
			}
		},
		{
			"file": "menu.py",
			"settings":
			{
				"buffer_size": 1770,
				"line_ending": "Windows"
			}
		},
		{
			"file": "evalution.py",
			"settings":
			{
				"buffer_size": 656,
				"line_ending": "Windows"
			}
		},
		{
			"file": "index.py",
			"settings":
			{
				"buffer_size": 7599,
				"line_ending": "Windows"
			}
		},
		{
			"file": "search.py",
			"settings":
			{
				"buffer_size": 5041,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/D/Downloads/ModelProbabilist.py",
			"settings":
			{
				"buffer_size": 1728,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/D/Downloads/InverseIndexTFIDF.py",
			"settings":
			{
				"buffer_size": 3830,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "with open('index.json') as data_file:\n    maVar = json.load(data_file)",
			"settings":
			{
				"buffer_size": 70,
				"line_ending": "Windows"
			}
		},
		{
			"file": "tools.py",
			"settings":
			{
				"buffer_size": 530,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "Packages/Python/Python.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 379.0,
		"last_filter": "compa",
		"selected_items":
		[
			[
				"compa",
				"Compare with..."
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"json",
				"JSON Reindent: reindent file or selection"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"lint",
				"Anaconda: Disable linting on this file"
			],
			[
				"python",
				"Set Syntax: Python"
			],
			[
				"install pac",
				"Package Control: Install Package"
			],
			[
				"format",
				"Anaconda: Autoformat PEP8 Errors"
			],
			[
				"auto",
				"User: Python PEP8 Autoformat"
			],
			[
				"packa",
				"Package Control: Install Package"
			],
			[
				"anaconda",
				"Anaconda: Next lint error"
			],
			[
				"anaconda: en",
				"Anaconda: Enable linting on this file"
			],
			[
				"ana",
				"Anaconda: Autoformat PEP8 Errors"
			],
			[
				"git comm",
				"Git: Commit"
			],
			[
				"git ad",
				"Git: Add All"
			],
			[
				"browse",
				"Preferences: Browse Packages"
			],
			[
				"pac",
				"Package Control: Remove Package"
			],
			[
				"package",
				"Package Control: List Packages"
			],
			[
				"console",
				"Package Control: Install Package"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"pack",
				"Package Control: Install Package"
			],
			[
				"comment",
				"Toggle Comment"
			],
			[
				"comm",
				"Toggle Block Comment"
			],
			[
				"",
				"Bookmarks: Clear All"
			],
			[
				"packac",
				"Package Control: Remove Package"
			],
			[
				"java",
				"Set Syntax: Java"
			],
			[
				"php",
				"Set Syntax: PHP"
			],
			[
				"disable pa",
				"Package Control: Disable Package"
			],
			[
				"enable",
				"Package Control: Enable Package"
			],
			[
				"disabl",
				"Package Control: Disable Package"
			],
			[
				"packae",
				"Package Control: Disable Package"
			],
			[
				"build",
				"Build: New Build System"
			],
			[
				"javascr",
				"Set Syntax: JavaScript Next"
			],
			[
				"git",
				"Git: Blame"
			],
			[
				"javascri",
				"Set Syntax: JavaScript Next"
			],
			[
				"javasc",
				"Set Syntax: JavaScript"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"pyth",
				"Set Syntax: Python"
			]
		],
		"width": 800.0
	},
	"console":
	{
		"height": 126.0,
		"history":
		[
			"os.getcwd()",
			"os.chdir('C:\\Users\\Victor\\Google Drive\\GIT\\RIW')",
			"os.chdir('~\\Google Drive\\GIT\\RIW')",
			"os.chdir('~/Google Drive/GIT/RIW')",
			"os.getcwd()",
			"os.getcwd",
			"import os",
			"pwd",
			"execute.py",
			"python",
			"import urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Users/Victor/Google Drive/GIT/SAASm",
		"/D/Google Drive/GIT/RIW"
	],
	"file_history":
	[
		"/D/Google Drive/GIT/RIW/ressources/iIndex.json",
		"/D/Google Drive/GIT/RIW/iIndex.json",
		"/D/Google Drive/GIT/RIW/CACM/query.text",
		"/D/Downloads/ModelVectorialExtended.py",
		"/D/Google Drive/GIT/cuddly-bassoon/angular-phonecat/package.json",
		"/D/Google Drive/GIT/cuddly-bassoon/angular-phonecat/old/bower.json",
		"/D/Downloads/inverseIndexProba.py",
		"/D/Google Drive/GIT/FlowFreePython/freeflow.py",
		"/D/Google Drive/GIT/cuddly-bassoon/angular-phonecat/bower.json",
		"/D/Google Drive/GIT/RIW/evaluation.csv",
		"/D/Google Drive/GIT/RIW/results.csv",
		"/C/Users/Victor/Google Drive/GIT/RIW/index.py",
		"/C/Users/Victor/Google Drive/GIT/RIW/compareAurore.py",
		"/C/Users/Victor/Google Drive/GIT/RIW/progres.txt",
		"/C/Users/Victor/Google Drive/GIT/RIW/CACM/cacm.all",
		"/C/Users/Victor/AppData/Roaming/Sublime Text 3/Packages/Jedi - Python autocompletion/sublime_jedi.sublime-settings",
		"/C/Users/Victor/Google Drive/GIT/RIW/main.py",
		"/C/Users/Victor/Google Drive/GIT/RIW/CACM/common_words",
		"/C/Users/Victor/Google Drive/GIT/RIW/main2.py",
		"/C/Users/Victor/Downloads/chessboard_codility.php",
		"/C/Users/Victor/Google Drive/GIT/SAASm/app.js",
		"/C/Users/Victor/Google Drive/GIT/SAASm/sublProject.sublime-project",
		"/C/Users/Victor/Google Drive/GIT/SAASm/views/APIEssai.html",
		"/C/Users/Victor/Google Drive/GIT/SAASm/posts.js",
		"/C/Users/Victor/Google Drive/GIT/SAASm/routes/content.js",
		"/C/Users/Victor/Google Drive/GIT/SAASm/routes/index.js",
		"/C/Users/Victor/Google Drive/GIT/SAASm/testapp/routes/index.js",
		"/C/Users/Victor/Google Drive/SaaS Manager/1erEssai/users.js",
		"/C/Users/Victor/Google Drive/SaaS Manager/1erEssai/sessions.js",
		"/C/Users/Victor/Google Drive/SaaS Manager/Mooc Victor/hw4-3/blog/posts.js",
		"/C/Users/Victor/Google Drive/SaaS Manager/Mooc Victor/hw4-3/blog/routes/content.js",
		"/C/Users/Victor/Google Drive/SaaS Manager/Mooc Victor/hw4-3/blog/routes/index.js",
		"/C/Users/Victor/Google Drive/SaaS Manager/Mooc Victor/hw4-3/blog/app.js",
		"/C/Users/Victor/Google Drive/GIT/RIW/CACM/README",
		"/C/Users/Victor/Google Drive/SaaS Manager/Mooc Victor/hw4-3/posts.json",
		"/C/Users/Victor/Google Drive/Perso/Documents importants/accesclient.txt"
	],
	"find":
	{
		"height": 64.0
	},
	"find_in_files":
	{
		"height": 90.0,
		"where_history":
		[
			"C:\\Users\\Victor\\Google Drive\\SaaS Manager\\Mooc Victor\\hw4-3\\blog"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"index",
			"iIndex",
			"generateIndex",
			"json.du",
			"tf",
			"query",
			"parsedQrels[int(line[0:2])] = line [4:7]",
			"dico",
			".W\n I'd like papers on design and implementation of editing interfaces,\nwindow-managers, command interpreters, etc.  The essential issues are\nhuman interface design, with views on improvements to user efficiency,\neffectiveness and satisfaction.",
			"\n    def generateDico(self):\n        articles = {}\n        article = {}\n        id = -1\n        separateurs = ['.I', '.T', '.W', '.B', '.A', '.N', '.X', '.K']\n        with open(self.source, 'r') as cacm:\n            for line in cacm:\n                if (line[0:2] == \".I\"):\n                    if (id != -1):\n                        articles[id] = article\n                        article = {}\n                    id = int(line[3:])\n                elif (line[0:2] in separateurs):\n                    delimiteur = line[0:2]\n                elif (line[0:2] not in separateurs and id != -1 and\n                      delimiteur != '.I'):\n                    if (delimiteur in article.keys()):\n                        if (delimiteur == '.A'):\n                            article[delimiteur] = article[\n                                delimiteur] + [line.replace('\\n', '')]\n                        else:\n                            article[delimiteur] = article[\n                                delimiteur] + line.replace('\\n', ' ')\n                    else:\n                        if (delimiteur == '.A'):\n                            article[delimiteur] = [line.replace('\\n', '')]\n                        else:\n                            article[delimiteur] = line.replace('\\n', ' ')\n            articles[id] = article\n        return articles",
			"generateDico",
			", u'",
			"granting",
			"I. 1657",
			".I 197",
			" ",
			"token",
			"international",
			"report",
			"json",
			"insertEntry",
			"\n    "
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"self.index",
			"self.iIndex",
			"self.dico",
			", '"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": true,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 2,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/D/Downloads/inverseIndexTFIDFwithoutNorm.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3343,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 120.0,
						"translation.y": 1601.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "execute.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2124,
						"regions":
						{
						},
						"selection":
						[
							[
								536,
								409
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"auto_name": "",
							"bh_regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content"
							],
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 318.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "menu.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1770,
						"regions":
						{
						},
						"selection":
						[
							[
								552,
								552
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage"
						},
						"translation.x": 7.0,
						"translation.y": 410.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				}
			]
		},
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 3,
					"file": "evalution.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 656,
						"regions":
						{
						},
						"selection":
						[
							[
								379,
								379
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "index.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7599,
						"regions":
						{
						},
						"selection":
						[
							[
								6898,
								6898
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content"
							],
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3638.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "search.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5041,
						"regions":
						{
						},
						"selection":
						[
							[
								3991,
								3991
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content"
							],
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "/D/Downloads/ModelProbabilist.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1728,
						"regions":
						{
						},
						"selection":
						[
							[
								1062,
								1062
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 602.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "/D/Downloads/InverseIndexTFIDF.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3830,
						"regions":
						{
						},
						"selection":
						[
							[
								302,
								302
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 8,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 70,
						"regions":
						{
						},
						"selection":
						[
							[
								70,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "tools.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 530,
						"regions":
						{
						},
						"selection":
						[
							[
								118,
								118
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"syntax": "Packages/Python/Python.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 34.0
	},
	"input":
	{
		"height": 34.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.431404573028,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 188.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.git":
	{
		"height": 100.0
	},
	"pinned_build_system": "Packages/Python/Python.sublime-build",
	"project": "RIW.sublime-project",
	"replace":
	{
		"height": 120.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"inde",
				"RIW\\index.py"
			],
			[
				"too",
				"RIW\\tools.py"
			],
			[
				"",
				"C:\\Users\\Victor\\Google Drive\\GIT\\RIW\\CACM\\README"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 417.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
